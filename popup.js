// popup.js - Enhanced UI with modern features
let currentDomain = null;

// Toast notification function
function showToast(message, type = 'success') {
  const toast = document.getElementById('toast');
  toast.textContent = message;
  toast.className = `toast ${type}`;
  toast.classList.add('show');

  setTimeout(() => {
    toast.classList.remove('show');
  }, 2000);
}

// Get current domain from active tab
function getDomain(cb) {
  chrome.tabs.query({active: true, currentWindow: true}, tabs => {
    try {
      const url = new URL(tabs[0].url);
      cb(url.hostname);
    } catch {
      cb(null);
    }
  });
}

// Get all stored domains and their file counts
function getAllDomainStats(cb) {
  chrome.storage.local.get(null, (data) => {
    const domains = Object.keys(data).filter(key => Array.isArray(data[key]));
    const totalFiles = domains.reduce((sum, domain) => sum + data[domain].length, 0);
    cb({ domainCount: domains.length, totalFiles });
  });
}

// Update the stats display
function updateStats(fileCount) {
  document.getElementById('file-count').textContent = fileCount;

  getAllDomainStats(stats => {
    document.getElementById('domain-count').textContent = stats.domainCount;
  });
}

// Render the file list with enhanced UI
function render(urls) {
  const list = document.getElementById('list');
  const empty = document.getElementById('empty');
  const copyBtn = document.getElementById('copy');
  const downloadBtn = document.getElementById('download');

  if (!urls || !urls.length) {
    list.innerHTML = '';
    empty.style.display = 'flex';
    copyBtn.disabled = true;
    downloadBtn.disabled = true;
    updateStats(0);
    return;
  }

  empty.style.display = 'none';
  copyBtn.disabled = false;
  downloadBtn.disabled = false;
  updateStats(urls.length);

  // Create enhanced file list items
  list.innerHTML = urls.map((url) => {
    let filename = 'unknown.js';
    try { filename = url.split('/').pop() || 'unknown.js'; } catch {}
    let itemDomain = '';
    let isExternal = false;
    try {
      itemDomain = new URL(url).hostname;
      isExternal = itemDomain !== currentDomain;
    } catch {}

    return `
      <div class="js-url" data-url="${url}" title="Click to copy: ${url}">
        <div style="display: flex; align-items: center; gap: 12px;">
          <div style="flex: 1;">
            <div style="font-weight: 600; margin-bottom: 4px; color: #333;">
              ${filename}
            </div>
            <div style="font-size: 11px; color: #6c757d; margin-bottom: 2px;">
              ${isExternal ? '🌐 External' : '🏠 Local'} • ${itemDomain}
            </div>
            <div style="font-size: 10px; color: #adb5bd; word-break: break-all;">
              ${url}
            </div>
          </div>
        </div>
      </div>
    `;
  }).join('');

  // Add click-to-copy functionality for individual URLs
  document.querySelectorAll('.js-url').forEach(item => {
    item.addEventListener('click', () => {
      const url = item.dataset.url;
      navigator.clipboard.writeText(url).then(() => {
        showToast('URL copied to clipboard!');
      });
    });
  });
}

// Copy all URLs to clipboard
document.getElementById('copy').onclick = () => {
  const urls = Array.from(document.querySelectorAll('.js-url')).map(e => e.dataset.url);
  if (urls.length) {
    navigator.clipboard.writeText(urls.join('\n')).then(() => {
      showToast(`Copied ${urls.length} URLs to clipboard!`);
    });
  }
};

// Download URLs as text file
document.getElementById('download').onclick = () => {
  getDomain(domain => {
    const urls = Array.from(document.querySelectorAll('.js-url')).map(e => e.dataset.url);
    if (!urls.length) return;

    const content = [
      `# JavaScript Files for ${domain}`,
      `# Generated by BugSniffer on ${new Date().toLocaleString()}`,
      `# Total files: ${urls.length}`,
      '',
      ...urls
    ].join('\n');

    const blob = new Blob([content], {type: 'text/plain'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${domain}_js_files.txt`;
    a.click();
    setTimeout(() => URL.revokeObjectURL(url), 1000);

    showToast(`Downloaded ${urls.length} URLs!`);
  });
};

// Clear all files for current domain
document.getElementById('clear').onclick = () => {
  if (!currentDomain) return;

  if (confirm(`Clear all JavaScript files for ${currentDomain}?`)) {
    chrome.storage.local.remove([currentDomain], () => {
      render([]);
      showToast('Files cleared!', 'info');
    });
  }
};

// Initialize the popup
getDomain(domain => {
  currentDomain = domain;

  // Update domain display
  const domainElement = document.getElementById('current-domain');
  if (domain) {
    domainElement.textContent = domain;
  } else {
    domainElement.textContent = 'Invalid page';
    render([]);
    return;
  }

  // Load and display stored files for this domain
  chrome.storage.local.get([domain], data => {
    render(data[domain] || []);
  });
});

// Refresh data every few seconds in case new files are detected
setInterval(() => {
  if (currentDomain) {
    chrome.storage.local.get([currentDomain], data => {
      const currentCount = document.querySelectorAll('.js-url').length;
      const newCount = (data[currentDomain] || []).length;

      if (newCount !== currentCount) {
        render(data[currentDomain] || []);
      }
    });
  }
}, 2000);
