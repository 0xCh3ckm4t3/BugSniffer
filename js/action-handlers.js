// ===== ACTION HANDLERS =====
import { showToast, copyToClipboard, downloadAsFile, getDomain } from './utils.js';

class ActionHandlers {
  constructor(jsListRenderer) {
    this.jsListRenderer = jsListRenderer;
    this.setupEventListeners();
  }

  /**
   * Setup all action event listeners
   */
  setupEventListeners() {
    this.setupCopyAction();
    this.setupDownloadAction();
    this.setupClearAction();
    this.setupRefreshAction();
  }

  /**
   * Setup copy all URLs action
   */
  setupCopyAction() {
    const copyBtn = document.getElementById('copy');
    if (copyBtn) {
      copyBtn.addEventListener('click', async () => {
        const urls = this.jsListRenderer.getCurrentURLs();
        if (!urls.length) {
          showToast('No URLs to copy', 'info');
          return;
        }

        const success = await copyToClipboard(urls.join('\n'));
        if (success) {
          showToast(`Copied ${urls.length} URLs to clipboard!`);
        } else {
          showToast('Failed to copy URLs', 'error');
        }
      });
    }
  }

  /**
   * Setup download action
   */
  setupDownloadAction() {
    const downloadBtn = document.getElementById('download');
    if (downloadBtn) {
      downloadBtn.addEventListener('click', () => {
        getDomain(domain => {
          const urls = this.jsListRenderer.getCurrentURLs();
          if (!urls.length) {
            showToast('No URLs to download', 'info');
            return;
          }

          const content = this.generateDownloadContent(domain, urls);
          const filename = `${domain || 'unknown'}_js_files.txt`;
          
          downloadAsFile(content, filename);
          showToast(`Downloaded ${urls.length} URLs!`);
        });
      });
    }
  }

  /**
   * Setup clear action
   */
  setupClearAction() {
    const clearBtn = document.getElementById('clear');
    if (clearBtn) {
      clearBtn.addEventListener('click', () => {
        getDomain(domain => {
          if (!domain) return;

          if (confirm(`Clear all JavaScript files for ${domain}?`)) {
            chrome.storage.local.remove([domain], () => {
              this.jsListRenderer.renderEmpty();
              showToast('Files cleared!', 'info');
              
              // Trigger a refresh of the popup
              window.dispatchEvent(new CustomEvent('dataChanged'));
            });
          }
        });
      });
    }
  }

  /**
   * Setup refresh action
   */
  setupRefreshAction() {
    const refreshBtn = document.getElementById('refresh-btn');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        showToast('Refreshing...', 'info');
        window.dispatchEvent(new CustomEvent('refreshRequested'));
      });
    }
  }

  /**
   * Generate download content
   */
  generateDownloadContent(domain, urls) {
    return [
      `# JavaScript Files for ${domain}`,
      `# Generated by BugSniffer on ${new Date().toLocaleString()}`,
      `# Total files: ${urls.length}`,
      '',
      ...urls
    ].join('\n');
  }

  /**
   * Update button states based on data availability
   */
  updateButtonStates(hasData, enabled) {
    const copyBtn = document.getElementById('copy');
    const downloadBtn = document.getElementById('download');

    if (copyBtn) {
      copyBtn.disabled = !hasData || !enabled;
    }
    if (downloadBtn) {
      downloadBtn.disabled = !hasData || !enabled;
    }
  }
}

export default ActionHandlers;
